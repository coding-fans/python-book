..
    Author: fasion
    Created time: 2019-10-13 11:02:47
    Last Modified by: fasion
    Last Modified time: 2019-10-21 09:56:59

==============
Python源码剖析
==============

.. toctree::
    :titlesonly:

    对象模型 <object-model/index>
    内建对象 <builtin-objects/index>

对象模型
========

#. 对象模型概述
#. 揭开对象神秘的面纱
#. 从创建到销毁，对象的生命周期

内建对象
========

#. 从 float 对象开始探索
#. int 对象设计思路揭秘
#. int 对象核心源码解析
#. bytes 对象设计思路揭秘
#. bytes 对象核心源码解析
#. str 对象设计思路揭秘
#. str 对象关键源码解析
#. list 对象设计思路揭秘
#. list 对象核心源码解析
#. set 对象设计思路揭秘
#. set 对象核心源码解析
#. dict 对象设计思路揭秘
#. dict 对象核心源码解析

虚拟机
======

#. Python 程序执行过程与字节码
#. 名字、作用域与名字空间
#. 初识虚拟机，一颗软件CPU
#. if 判断控制流
#. for 循环控制流
#. while 循环控制流

函数机制
========

#. 函数对象诞生记
#. 函数调用与虚拟机软件栈
#. 函数参数的实现
#. 嵌套函数与闭包的实现
#. 如何实现函数代码热更新

类机制
======

#. 自定义类诞生记
#. 类的实例化与实例对象属性查找
#. 特殊的属性——方法

多线程机制
==========

#. GIL的作用与问题
#. 线程的建立、销毁、调度与同步
#. 如何发挥多核处理器的性能

模块动态加载机制
================

#. 多角度观察 import 的行为
#. 深入源码解读 import 机制的实现
#. 从字节码角度审视不同的 import 操作
#. reload 模块实现热更新

内存管理机制
============

#. 用小块内存池优化内存分配效率
#. 小块内存池关键代码解析
#. 基于引用计数的垃圾回收机制
#. 基于标记清除的垃圾回收机制
#. 基于分代回收的垃圾回收机制

生成器与协程
============

#. 重拾 generator ，研究一些高级用法
#. 在源码中窥探 generator 的工作原理
#. 为何 generator 能够用于实现协程
#. asyncio，更高级的协程
